var x1 >=0 ;
var x2 >=0 ;
var x3 >=0 ;
var x4 >=0 ;
var x5 >=0 ;
var x6 >=0 ;
var x7 >=0 ;
var x8 >=0 ;
var x9 >=0 ;
var x10 >=0 ;
var x11 >=0 ;
var x12 >=0 ;
var x13 >=0 ;
var x14 >=0 ;
var x15 >=0 ;
var x16 >=0 ;
var x17 >=0 ;
var x18 >=0 ;
var x19 >=0 ;
var x20 >=0 ;
var x21 >=0 ;
var x22 >=0 ;
var x23 >=0 ;
var x24 >=0 ;
var x25 >=0 ;
var x26 >=0 ;
var x27 >=0 ;
var x28 >=0 ;
var x29 >=0 ;
var x30 >=0 ;
var x31 >=0 ;
var x32 >=0 ;
var x33 >=0 ;
maximize obj: 0.0  + 0.0 * x1   -1.0 * x2   -2.0 * x3   -1.0 * x4   -1.0 * x5   + 1.0 * x6   -2.0 * x7   -1.0 * x8   + 0.0 * x9   -1.0 * x10   + 1.0 * x11   + 1.0 * x12   + 1.0 * x13 ;
c1: x14 = 10.0  + 1.0 * x1  + 2.0 * x2  + 0.0 * x3  -1.0 * x4  -2.0 * x5  + 3.0 * x6  -1.0 * x7  + 0.0 * x8  -1.0 * x9  -3.0 * x10  + 1.0 * x11  + 3.0 * x12  -3.0 * x13 ;
c2: x15 = 10.0  -1.0 * x1  -2.0 * x2  + 3.0 * x3  -3.0 * x4  -1.0 * x5  -2.0 * x6  -1.0 * x7  -2.0 * x8  -2.0 * x9  + 2.0 * x10  + 1.0 * x11  + 2.0 * x12  + 3.0 * x13 ;
c3: x16 = 15.0  -2.0 * x1  + 2.0 * x2  + 3.0 * x3  + 0.0 * x4  -3.0 * x5  + 0.0 * x6  -1.0 * x7  -1.0 * x8  -1.0 * x9  + 2.0 * x10  -1.0 * x11  + 2.0 * x12  + 0.0 * x13 ;
c4: x17 = 12.0  + 0.0 * x1  + 0.0 * x2  -1.0 * x3  -1.0 * x4  -2.0 * x5  + 1.0 * x6  + 1.0 * x7  + 3.0 * x8  + 2.0 * x9  + 0.0 * x10  + 0.0 * x11  + 2.0 * x12  -3.0 * x13 ;
c5: x18 = 15.0  -1.0 * x1  -1.0 * x2  -3.0 * x3  + 1.0 * x4  + 1.0 * x5  -2.0 * x6  -2.0 * x7  + 2.0 * x8  + 3.0 * x9  -3.0 * x10  + 2.0 * x11  -2.0 * x12  -2.0 * x13 ;
c6: x19 = 14.0  + 2.0 * x1  -1.0 * x2  -3.0 * x3  -2.0 * x4  -3.0 * x5  -1.0 * x6  -1.0 * x7  + 3.0 * x8  -1.0 * x9  + 2.0 * x10  + 3.0 * x11  + 2.0 * x12  + 2.0 * x13 ;
c7: x20 = 5.0  -2.0 * x1  + 0.0 * x2  + 2.0 * x3  + 1.0 * x4  -1.0 * x5  + 2.0 * x6  -3.0 * x7  + 0.0 * x8  + 0.0 * x9  + 1.0 * x10  -1.0 * x11  + 2.0 * x12  -1.0 * x13 ;
c8: x21 = 4.0  + 3.0 * x1  + 0.0 * x2  + 3.0 * x3  + 0.0 * x4  -3.0 * x5  -1.0 * x6  -3.0 * x7  -2.0 * x8  -2.0 * x9  + 0.0 * x10  -1.0 * x11  + 3.0 * x12  + 2.0 * x13 ;
c9: x22 = 13.0  + 1.0 * x1  -1.0 * x2  -3.0 * x3  + 0.0 * x4  + 3.0 * x5  -1.0 * x6  + 1.0 * x7  -3.0 * x8  + 0.0 * x9  -1.0 * x10  + 3.0 * x11  -1.0 * x12  + 3.0 * x13 ;
c10: x23 = 7.0  + 3.0 * x1  + 3.0 * x2  -2.0 * x3  -2.0 * x4  -2.0 * x5  + 1.0 * x6  -1.0 * x7  -3.0 * x8  -3.0 * x9  + 2.0 * x10  + 3.0 * x11  -1.0 * x12  -3.0 * x13 ;
c11: x24 = 7.0  -1.0 * x1  + 0.0 * x2  + 1.0 * x3  + 3.0 * x4  + 2.0 * x5  -3.0 * x6  + 0.0 * x7  -1.0 * x8  + 0.0 * x9  + 0.0 * x10  + 1.0 * x11  -2.0 * x12  + 0.0 * x13 ;
c12: x25 = 7.0  + 1.0 * x1  + 1.0 * x2  + 3.0 * x3  -1.0 * x4  -1.0 * x5  -3.0 * x6  -3.0 * x7  -1.0 * x8  + 1.0 * x9  -3.0 * x10  + 0.0 * x11  -3.0 * x12  -2.0 * x13 ;
c13: x26 = 7.0  + 2.0 * x1  + 2.0 * x2  -2.0 * x3  + 1.0 * x4  + 3.0 * x5  + 3.0 * x6  + 3.0 * x7  -1.0 * x8  + 1.0 * x9  + 0.0 * x10  + 2.0 * x11  -3.0 * x12  -1.0 * x13 ;
c14: x27 = 3.0  + 1.0 * x1  + 1.0 * x2  -2.0 * x3  + 0.0 * x4  -1.0 * x5  -3.0 * x6  + 3.0 * x7  + 1.0 * x8  -2.0 * x9  -1.0 * x10  + 1.0 * x11  -2.0 * x12  -1.0 * x13 ;
c15: x28 = 8.0  + 0.0 * x1  -2.0 * x2  + 0.0 * x3  -2.0 * x4  + 3.0 * x5  + 3.0 * x6  + 3.0 * x7  -2.0 * x8  -1.0 * x9  + 0.0 * x10  + 1.0 * x11  -1.0 * x12  + 3.0 * x13 ;
c16: x29 = 1.0  -3.0 * x1  + 3.0 * x2  -1.0 * x3  + 1.0 * x4  -2.0 * x5  -3.0 * x6  -2.0 * x7  -1.0 * x8  + 1.0 * x9  + 3.0 * x10  + 2.0 * x11  -1.0 * x12  -3.0 * x13 ;
c17: x30 = 8.0  -3.0 * x1  -3.0 * x2  + 2.0 * x3  + 3.0 * x4  + 3.0 * x5  + 3.0 * x6  + 2.0 * x7  -2.0 * x8  -2.0 * x9  -3.0 * x10  + 1.0 * x11  + 0.0 * x12  + 2.0 * x13 ;
c18: x31 = 15.0  + 1.0 * x1  + 1.0 * x2  + 2.0 * x3  + 3.0 * x4  + 2.0 * x5  + 3.0 * x6  -3.0 * x7  -1.0 * x8  + 0.0 * x9  -3.0 * x10  + 3.0 * x11  + 2.0 * x12  + 2.0 * x13 ;
c19: x32 = 3.0  + 3.0 * x1  -3.0 * x2  -2.0 * x3  + 1.0 * x4  + 2.0 * x5  + 2.0 * x6  + 0.0 * x7  + 0.0 * x8  -3.0 * x9  -3.0 * x10  -2.0 * x11  + 1.0 * x12  -3.0 * x13 ;
c20: x33 = 1.0  + 0.0 * x1  + 0.0 * x2  -2.0 * x3  + 1.0 * x4  -2.0 * x5  + 0.0 * x6  + 2.0 * x7  -3.0 * x8  -1.0 * x9  -3.0 * x10  + 1.0 * x11  -3.0 * x12  + 2.0 * x13 ;
solve; 
display 0.0  + 0.0 * x1   -1.0 * x2   -2.0 * x3   -1.0 * x4   -1.0 * x5   + 1.0 * x6   -2.0 * x7   -1.0 * x8   + 0.0 * x9   -1.0 * x10   + 1.0 * x11   + 1.0 * x12   + 1.0 * x13 ;
 
 end; 
